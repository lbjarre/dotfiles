#!/bin/sh
# Get the current weather from wttr.in, with some caching

# cache location
CACHE_FILE=${WTTR_CACHE:-"${HOME}/.cache/wttr/cached"}
# cache ttl in seconds
CACHE_TTL=${WTTR_CACHE_TTL:-300}

# Emit a debug line to stderr, if WTTR_DEBUG is set.
debug() {
    # set the WTTR_DEBUG env var to print debug logs
    [ "${WTTR_DEBUG}" ] && echo "$@" >&2
}

# Runs setup.
setup() {
    # curl required, check that it's installed.
    if ! command -v curl > /dev/null; then
        echo "error: missing curl"
        return 1
    fi

    # Create cache dir if not present.
    cache_dir=$(dirname "${CACHE_FILE}")
    if [ ! -d "${cache_dir}" ]; then
        debug "creating dir for cache"
        mkdir -p "${cache_dir}"
    fi
}

# Reads value from cache from stdin. Prints the result to stdout if its a cache hit.
read_weather() {
    read -r FETCHED_AT
    NOW=$(date +%s)
    DIFF=$((NOW - FETCHED_AT))
    if [ ${DIFF} -lt "${CACHE_TTL}" ]; then
        debug "cache hit: fetched at=${FETCHED_AT}, now=${NOW}, diff=${DIFF}"
        read -r CACHED_RESULT
        echo "${CACHED_RESULT}"
    fi
}

# Writes the value $1 in the cache format to stdout.
write_weather() {
    NOW=$(date +%s)
    printf "%s\n%s\n" "${NOW}" "${1}"
}

main() {
    # Run setup.
    if ! setup; then exit 1; fi

    debug "cache: file=${CACHE_FILE}, ttl=${CACHE_TTL}"

    # Check first if cached value is still live.
    if [ -f "${CACHE_FILE}" ]; then
        CACHED=$(read_weather < "${CACHE_FILE}")
        if [ "${CACHED}" ]; then
            echo "${CACHED}"
            exit 0
        fi
    fi

    # Else, fetch from wttr.in.
    debug "cache miss, fetching from wttr.in"
    WEATHER=$(curl wttr.in/?format="%c+%t+(%f)+%p\n" 2>/dev/null)

    # Write result to cache.
    write_weather "${WEATHER}" > "${CACHE_FILE}"

    # Echo result to stdout.
    echo "${WEATHER}"
}

main < /dev/null
